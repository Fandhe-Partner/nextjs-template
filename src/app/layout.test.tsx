import { render, screen } from "@testing-library/react";
import React from "react";
import { describe, expect, it, vi } from "vitest";
import RootLayout, { metadata } from "./layout";

// Mock next/font/google
vi.mock("next/font/google", () => ({
  Geist: vi.fn().mockReturnValue({
    variable: "--font-geist-sans",
    subsets: ["latin"],
  }),
  Geist_Mono: vi.fn().mockReturnValue({
    variable: "--font-geist-mono",
    subsets: ["latin"],
  }),
}));

describe("RootLayout", () => {
  it("sets the correct metadata", () => {
    expect(metadata.title).toBe("Create Next App");
    expect(metadata.description).toBe("Generated by create next app");
  });

  it("renders children within HTML & BODY elements with correct attributes", () => {
    // Mock document elements before rendering
    document.documentElement.lang = "";
    document.body.className = "";
    render(
      <RootLayout>
        <div data-testid="child-content">Hello Layout</div>
      </RootLayout>,
    );

    // Verify child content is rendered
    const childContent = screen.getByTestId("child-content");
    expect(childContent).toBeInTheDocument();

    // Verify HTML attributes
    expect(document.documentElement.lang).toBe("en");

    // Verify content
    expect(screen.getByText("Hello Layout")).toBeInTheDocument();

    // Verify font classes are applied to body
    expect(document.body.className).toContain("--font-geist-sans");
    expect(document.body.className).toContain("--font-geist-mono");
  });

  it("applies font variables correctly", () => {
    render(
      <RootLayout>
        <div>Content</div>
      </RootLayout>,
    );

    const body = document.body;
    const bodyClasses = body.className;
    expect(bodyClasses).toContain("--font-geist-sans");
    expect(bodyClasses).toContain("--font-geist-mono");
  });
});
